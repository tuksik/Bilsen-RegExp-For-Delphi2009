<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>.Net-style Regular Expression Library for use with Delphi 2009 or later</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style>
body { 
  background-color: #FFFFFF;
  color: #330099;
  font-family: tahoma, verdana, arial, helvetica, sans-serif;
  font-size: 9pt;
  scrollbar-base-color: #6633cc;
  scrollbar-arrow-color: #ffffff }
table {
  font-size: 9pt}
:link {
  text-decoration: underline;
  color: #9966ff }
:visited {
  text-decoration: underline;
  color: #9966ff }
:hover {
  text-decoration: none;
  background-color: #9966ff;
  color: #ffffff }    
:active {
  text-decoration: none;
  background-color: #9966ff;
  color: #ffffff }
h1, h2, h3, h4, h5, h6 {
  color: #993300 }
.Tab {
  font-size: 13px }
.Tab A:link {
  text-decoration: none;
  color: #330099 }
.Tab A:visited {
  text-decoration: none;
  color: #330099 }
.Tab A:hover {
  text-decoration: none;
  background-color: #9966ff;
  color: #ffffff }
.Tab A:active {
  text-decoration: none;
  background-color: #ffffff;
  color: #330099 }
.FootNote {
	font-size: 8pt;
}
.Caption {
	font-size: 8pt;
	font-weight: bold;
}
.Formula {
	font-family: "Times New Roman", Times, serif;
	font-size: 10pt;
}
.Code {
	font-family: "Courier New", Courier, mono;
	color: #000000;
}
.pas1-assembler { color: #800080; }
.pas1-character { color: #0000FF; }
.pas1-comment { color: #008000; font-style: italic; }
.pas1-float { color: #0000FF; }
.pas1-hexadecimal { color: #0000FF; }
.pas1-identifier { color: #000000; }
.pas1-number { color: #0000FF; }
.pas1-preprocessor { color: #008000; font-style: italic; }
.pas1-reservedword { color: #000080; font-weight: bold; }
.pas1-space { color: #000000; }
.pas1-string { color: #0000FF; }
.pas1-symbol { color: #000000; }
</style>
</head>

<body>
<h2>.Net-style Regular Expression Library for Delphi 2009 or later</h2>
<p> This library emulates the .Net classes in the System.Text.RegularExpressions namespace
(<a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.aspx">http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.aspx</a>).</p>
<p>  It uses PCRE (Perl Compatible Regular Expressions) as the backend to perform the regular expression matching (see <a href="http://www.pcre.org">http://www.pcre.org</a>). The library does not depend on a DLL so you do not have to deploy any additional DLLs with your application. All PCRE functionality is linked into the application using object files.</p>
<p> For more information about the .Net regular expression syntax, take a look
at <a href="http://msdn.microsoft.com/en-us/library/hs600312.aspx">http://msdn.microsoft.com/en-us/library/hs600312.aspx</a>.</p>
<p><strong>Note</strong>: this library only works with Delphi 2009 and later because of its use of generics and Unicode support.</p>
<h3>Supported Features</h3>
<p> This version uses interfaces like <span class="Code">IRegex</span> and <span class="Code">IMatch</span> etc. that provide almost
  the same functionality as the classes <span class="Code">Regex</span> and <span class="Code">Match</span> etc. in the .Net
framework.</p>
<p>The most common use is to create an <span class="Code">IRegex</span> object (as implemented by <span class="Code">TRegex</span>) and use its methods to search for regular expression matches or replace text:</p>
<pre><code><span style="font: 10pt Courier New;"><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Test;
</span><span class="pas1-reservedword">var
</span><span class="pas1-space">  Regex: IRegex;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  Regex := TRegex.Create(</span><span class="pas1-string">'^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$'</span><span class="pas1-symbol">);
  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> (Regex.IsMatch(</span><span class="pas1-string">'foo@bar.com'</span><span class="pas1-symbol">)) </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    ShowMessage(</span><span class="pas1-string">'Valid email address'</span><span class="pas1-symbol">)
  </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    ShowMessage(</span><span class="pas1-string">'Invalid email address'</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;</span></span></code></pre>
<p> The example above tests the validity of an email address using a regular expression. Note that you always assign the regular expression object to a variable of type <span class="Code">IRegex</span> (and not of type <span class="Code">TRegex</span>). This gives you the advantage of automatic memory management so you don't have the free the object.</p>
<p>Like the .Net version, the <span class="Code">TRegex</span> class also supports some static class methods. When you use these methods, the compiled regular expression gets cached. So the next time you use the same regular expression, the precompiled version will be used. For more information about caching regular expression, see the MSDN library documentation for the System.Text.RegularExpressions namespace.</p>
<p>The example above can be rewritten to use caching like this:</p>
<pre>
<code><span style="font: 10pt Courier New;"><span class="pas1-reservedword">procedure</span><span class="pas1-space"> Test;
</span><span class="pas1-reservedword">begin
</span><span class="pas1-space">  </span><span class="pas1-reservedword">if</span><span class="pas1-space"> TRegex.IsMatch(</span><span class="pas1-string">'foo@bar.com'</span><span class="pas1-symbol">, </span><span class="pas1-string">'^([0-9a-zA-Z]([-\.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$'</span><span class="pas1-symbol">) </span><span class="pas1-reservedword">then
</span><span class="pas1-space">    ShowMessage(</span><span class="pas1-string">'Valid email address'</span><span class="pas1-symbol">)
  </span><span class="pas1-reservedword">else
</span><span class="pas1-space">    ShowMessage(</span><span class="pas1-string">'Invalid email address'</span><span class="pas1-symbol">);
</span><span class="pas1-reservedword">end</span><span class="pas1-symbol">;</span></span></code></pre>
<p>The following classes/interfaces, properties and methods are supported:</p>
<h5>IRegex/TRegex
</h5>
<ul>
  <li>GetGroupNames</li>
  <li>GetGroupNumbers</li>
  <li>GroupNameFromNumber</li>
  <li>GroupNumberFromName</li>
  <li>IsMatch</li>
  <li>Match</li>
  <li>Matches</li>
  <li>Replace</li>
  <li>Split</li>
  <li>ToString</li>
  <li>Escape</li>
  <li>Unescape</li>
  <li>CacheSize</li>
  <li>Options: IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace</li>
</ul>
<p>It also offers the following methods and options that are not part of the .Net version:</p>
<ul>
  <li>Save: to save a compiled regular expression to a stream</li>
  <li>Load: to load a compiled regular expression from a stream</li>
  <li>Option &quot;Study&quot;, which will cause
a more in-depth analysis of the regex pattern. This  may speedup the matching
process. This is especially useful if you use the same pattern multiple
times. The analysis takes some time too, so you should only use this option
when needed.<br>
  </li>
</ul>
<h5>IMatch/TMatch</h5>
<ul>
  <li>Index</li>
  <li>Length</li>
  <li>Value</li>
  <li>ToString</li>
  <li>Success</li>
  <li>NextMatch</li>
  <li>Result</li>
  <li>Groups</li>
  <li>Empty</li>
</ul>
<h5>IGroup/TGroup</h5>
<ul>
  <li>Index</li>
  <li>Length</li>
  <li>Value</li>
  <li>ToString</li>
  <li>Success</li>
</ul>
<h4>Character Indices</h4>
<p><strong>Note</strong>: This engine differs in the .Net version when it comes to character
  indices. 
  Delphi strings start at index 1 and .Net strings start at index 0.</p>
<p>  This engine uses 1-based indices and offsets, since these are natural for
  Delphi strings. You may need to take this into account when translating .Net
  code over to Delphi.</p>
<h3>Unsupported Featres </h3>
<p>The following methods and properties are not supported in the library (mostly because the PCRE backend does not support these or because they don't make sense in Win32):</p>
<h5>Regex</h5>
<ul>
  <li>CompileToAssembly</li>
  <li>Options: Compiled (PCRE always compiles to an intermediate version), RightToLeft, ECMAScript, CultureInvariant</li>
</ul>
<h5>Match</h5>
<ul>
  <li>Synchronized</li>
</ul>
<h5>Group</h5>
<ul>
  <li>Synchronized</li>
  <li>Captures</li>
</ul>
<p>Similarly, there are no equivalents for the following .Net classes:</p>
<ul>
  <li>RegexCompilationInfo</li>
  <li>RegexRunner</li>
  <li>RegexRunnerFactory</li>
</ul>
<h3>Regular Expression Syntax</h3>
<p> Since PCRE is used as a backend, only PCRE-compatible regex syntax is
  supported. Fortunately, the vast majority of the .Net regex syntax is
  compatible with PCRE. </p>
<p>Exceptions include:</p>
<ul>
  <li>.Net-style balanced named capturing groups <span class="Code">(?&lt;name1-name2&gt;)</span> are not
  supported.</li>
  <li>Positive lookbehind <span class="Code">(?&lt;=text)</span> only supports fixed length. The .Net engine
  also supports variable length lookbehind <span class="Code">(?&lt;=x+)</span>.</li>
  <li>.Net-style <span class="Code">(?(regex)then|else)</span> conditionals are not supported. Use PCRE-style
  <span class="Code">(?(?=regex)then|else)</span> conditionals instead.</li>
  <li>PCRE does not support the &quot;Is&quot;-prefix for Unicode scripts (as in    &quot;<span class="Code">\p{IsGreek}</span>&quot;). So use the version without the prefix instead (as in    &quot;<span class="Code">\p{Greek}</span>&quot;).</li>
  <li>Duplicate names in named capturing groups are allowed <span class="Code">(?&lt;foo&gt;e)(?&lt;foo&gt;x),</span>    but unlike .Net, this engine will create a group for each alternative.<br>
    In this example, there will be two groups named 'foo' (whereas the .Net
  engine only returns one group named 'foo').</li>
  <li>In the .Net version, values in {} quantifiers can go up to 2147483647.
    PCRE supports a maximum value of 65535. However, this should suffice almost
    all practical applications.</li>
</ul>
<h3>What's Included</h3>
<p>The library consists of the following directories:</p>
<h5>Lib</h5>
<p>This is the directory you want to include in your own project. It contains the units &quot;pcre.pas&quot; and and &quot;RegularExpressions.pas&quot;. In your projects, you will only use the unit &quot;RegularExpressions&quot;, with contains the classes and interfaces discussed above. The &quot;pcre&quot; unit is used internally and links in the PCRE object files.</p>
<h5>C++ Builder Projects</h5>
<p>You only need this directory when you need to build the PCRE object files yourself (for example, when there is a new version of PCRE). See the Readme.txt file in this directory for details on how to do that.</p>
<p>  This library comes with pre-made versions of the PCRE objects files, so you generally do not need to build them yourself.
</p>
<h5>Tests</h5>
<p>This directory contains about a 1000 unit tests to test the correctness of the library. Most of these unit tests are converted from the Mono implementation of the System.Text.RegularExpressions namespace (see <a href="http://www.mono-project.com">http://www.mono-project.com</a>). Note that only those unit tests are included that test the supported functionality in this library. For example, all Mono unit tests that test the right-to-left matching are excluded.</p>
<p>The library should pass all unit tests.</p>
<h5>Doc</h5>
<p>Contains this readme.</p>
<h5>Demo</h5>
<p>Contains a sample application that shows how to use this library. The demo shows the examples that are included in the .Net Framework SDK, as well as some recipes for commonly used regular expressions. The recipes are taken from <a href="http://www.regexlib.com/">RegExLib.com</a>.</p>
<p><img src="RegularExpressions.gif" width="865" height="475" alt="Regular Expressions Demo Application"></p>
</body>
</html>
